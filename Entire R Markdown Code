---
title: "Nanika Escapement Time Series"
author: "Randi Hugdahl"
date: "2025-04-01"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, fig.width = 10, fig.height = 6, out.width = "120%")
```

## Introduction

Stream Inspection Log (SIL) data have been consistently collected VIA aerial and snorkel surveys across the Nanika river for many decades, with current years of interest ranging from 2004 until present (2024). Although these data have been reviewed for quality assurance, many inconsistencies remain, making the creation of an accurate escapement time series challenging. This document outlines potential strategies for data manipulation in excel and R Studio to help alleviate these concerns in the Nanika River system. These strategies could be expanded upon to visualize escapement time series’ across other rivers in the Upper Skeena watershed (e.g. Babine, Morice), given that differences in morphology and fish distribution are appropriately considered.


## Goal:
To generate and plot a representative time series of AUC escapement for spawning Sockeye salmon in the Nanika River across appropriate survey years, from 2004 – 2024. 

## Concerns
### Inconsistent Fish Distribution
The Nanika River is unique in terms of fish distribution, as preferred Sockeye spawning habitat is not equally distributed. The vast majority of observed Sockeye spawning habitat consists of 3 main spawning lagoons, which are located in the upper portion of the Nanika River, from Nanika falls downstream approximately 4 kilometers. SIL data illustrate that the majority of spawning Sockeye have been observed in this upper section consistently from 2004 – 2024. 

### Inconsistent Survey Extent
Although there has been consistent temporal cover of the Nanika River VIA aerial and snorkel surveys, the extent of these surveys has varied significantly, both within and across survey years. Given the uneven distribution of spawners which heavily favours the upper portion of the river, many aerial surveys forego the less populated lower sections to conserve time and money on flights. To quantify this, STAD staff have suggested the addition of new fields in the SIL data entry sheets which provide the proportion of the total survey distance covered by each individual survey. However, this proportion only provides us with the proportion of the total length of the Nanika river which was surveyed, as this information cannot be applied to observed fish counts given the uneven distribution of spawning Sockeye in this system. 

### Selecting Appropriate Residence Time
This winter, STAD staff examined Nanika SIL data from previous years to back-calculate the residence time used in AUC escapement calculations. However, rationale behind the selection of these residence times is not recorded, and residence times vary across years. 

### Lack of Distinction between Spawners and Holders
Extracting additional information regarding fish distribution, observer efficiency, and other relevant information was a major component of the winter review and QA of SIL data. However, with the exception of 2024, many years contain few or no surveys which accurately distinguish between holding and spawning Sockeye. Instead, most surveys list all observed Sockeye as either holding or spawning, assumingly dependent on the time of year and the behaviour/distribution of the majority of sockeye observed.
 
## Possible Solutions


## 1. Full Survey Extent Method: Include only surveys which cover the entire survey extent 
Required data fields (per survey):

Existing Fields: 

+ Sock_AL_Spawning
+ StreamId
+ SilDate
+ PrimaryInspMode
+ SectionInspected
+ FishDistribution
+ RationaleForEstLive
+ GenComments
+ UnusualConditions


#### Methods 

##### <u>Define reaches</u>
Based on surveyor comments from Nanika River aerial surveys, Red Slide Creek was selected as the appropriate boundary between reaches (See Figure 1). 


```{r fig.cap="Figure 1: Aerial Survey Extent of Nanika River, Reaches 1 and 2", echo=FALSE, out.width="100%"}
knitr::include_graphics("C:/Users/hugdahlr/Documents/Nanika SK Review/Nanika_Survey_Extent_Map.jpg")
```

##### <u>Creating new data fields</u>
Using information present in SIL data, particularly within the various comment and rationale fields recorded by the surveyor, new fields must be created to inform the AUC function. 

+ proportion.surveyed 
  + Depending on fish distribution and survey extent of the river in question, defining separate reaches may be appropriate (as is the case for Nanika). Create proportion.surveyed field informed by SectionInspected field, where surveys which cover the entire extent = 1, and surveys which cover only partial extent = 0.2 (or a value representative of the reach in question)
+ obs.eff
  + Use surveyor comments (generally found in RationaleForEstLive field) to fill observer efficiency as proportions
  + Replace NA values with average obs.eff, or appropriate obs.eff value of choice (e.g. 0.7)
    + Note: create a new column, then replace NA values for easy adjustment of chosen replacement obs.eff value
+ julian.day
  + Use a Julian day calculator to fill the appropriate values for each survey
+ fullextent_sk_spawners
  + Fill using values from the Sock_AL_Spawning field **only when** proportion.surveyed = 1
+ fullextent_sk_spawners_est_total
  + Fill by dividing (fullextent_sk_spawners / obs.eff)

##### <u>Define residence time</u>
Winter data review found that residence time used in AUC escapement calculations (2004-2024) ranged from 10 - 21 days. However, of these estimates, only 2 years used only spawning Sockeye to select residence time.

The average of these residence times (2009 = 13.5 days, 2022 = 15 days) was chosen for this context at 14.25 days.

For the purpose of time series visualization, a constant residence time will be used.

##### Define and run AUC escapement function (test.auc.allinone) using created fields

+ test.auc.allinone function is defined to calculate AUC escapement from relevant raw data fields 
+ Raw data are imported 
+ test.auc.allinone function is run once for each relevant survey year
  + Where day = julian.day, count = fullextent_sk_spawners_est_total, residence time = 14.25
+ **Optional:** Survey years with fewer than 2 relevant surveys are removed (e.g. 2017, 2008(?))
+ AUC values are extracted from resulting dataframes, the converted to a new dataframe (auc_values_1)
+ auc_values_1 is centralized and standardized to visualize time series
+ Resulting escapement time series is plotted 
  +**Optional**: smoothed trend line is added for visualization

```{r fig.cap = "Figure 2: Nanika River Escapement Time Series, Full Survey Extent Method (2004-2024)", echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}

# Load required libraries
library(readxl)
library(tidyverse)
library(ggplot2)
library(zoo) # For interpolation

test.auc.allinone <- function(day, count, res.time){
  data.frame(day, count) %>% 
    add_row(day = 0, count = 0) %>% 
    add_row(day = 364, count = 0) %>% 
    arrange(day) %>% 
    mutate(survey = seq(1, length(day), by = 1)) %>%  
    mutate(day.x1 = lead(day, 1) - res.time) %>% 
    mutate(day.x2 = lead(day, 1) - lead(count, 1) / (abs(lead(count, 2) - lead(count, 1)) / (lead(day, 2) - lead(day, 1)))) %>% 
    mutate(day = ifelse(day %in% 0, pmax(day.x1, day.x2, na.rm = TRUE), day)) %>% 
    mutate(day.x3 = lag(day, 1) + res.time) %>% 
    mutate(day.x4 = lag(day, 1) - lag(count, 1) / (abs(lag(count, 2) - lag(count, 1)) / (lag(day, 2) - lag(day, 1)))) %>% 
    mutate(day = ifelse(day %in% last(day), pmin(day.x3, day.x4, na.rm = TRUE), day)) %>% 
    select(-c(day.x1, day.x2, day.x3, day.x4)) %>% 
    mutate(day_1 = lag(day)) %>% 
    mutate(count_1 = lag(count)) %>%
    mutate(int = day - day_1) %>% 
    mutate(fish_days = c(NA, diff(day) * zoo::rollmean(count, 2))) %>% 
    summarize(fish_days = sum(na.omit(fish_days))) %>% 
    mutate(auc = fish_days / res.time) %>% 
    select(auc)
}

# Import and process data for proportion = 1
nanika.sils <- read_xlsx("RH_SILs.toreview-nanikaSKCH2004-2024.xlsx", na = "NA")
auc.2004 <- test.auc.allinone(day = c(259, 272), count = c(2.9, 500), res.time = 14.25)
auc.2005 <- test.auc.allinone(day = c(248, 266), count = c(0, 458.8), res.time = 14.25)
auc.2006 <- test.auc.allinone(day = c(249, 263, 266, 285), count = c(733.3, 4333.3, 1400, 205), res.time = 14.25)
auc.2007 <- test.auc.allinone(day = c(249, 258, 261, 264, 268, 275, 283), count = c(0, 8469.2, 5907.7, 7000, 4307.7, 3900, 713.8), res.time = 14.25)
#auc.2008 <- test.auc.allinone(day = c(219), count = c(1942.9), res.time = 14.25)
auc.2009 <- test.auc.allinone(day = c(253, 259, 266, 280), count = c(8371.4, 3578.6, 6680, 111.4), res.time = 14.25)
auc.2011 <- test.auc.allinone(day = c(255, 264, 265), count = c(3292.3, 4115.4, 3576.9), res.time = 14.25)
auc.2012 <- test.auc.allinone(day = c(249, 264, 278), count = c(271.4, 6671.4, 380), res.time = 14.25)
auc.2013 <- test.auc.allinone(day = c(256, 263, 270), count = c(6470.7, 3648.0, 1230.7), res.time = 14.25)
auc.2014 <- test.auc.allinone(day = c(265, 270), count = c(7388.2, 4667.1), res.time = 14.25)
auc.2015 <- test.auc.allinone(day = c(273), count = c(6808.2), res.time = 14.25)
auc.2016 <- test.auc.allinone(day = c(263, 273), count = c(8828.6, 2351.4), res.time = 14.25)
#auc.2017 <- test.auc.allinone(day = c(273), count = c(725), res.time = 14.25)
auc.2018 <- test.auc.allinone(day = c(264, 270, 285), count = c(6225, 7987.5, 675), res.time = 14.25)
auc.2019 <- test.auc.allinone(day = c(253, 265, 276, 290), count = c(10578.9, 13957.9, 7752.6, 224.2), res.time = 14.25)
auc.2020 <- test.auc.allinone(day = c(262, 274), count = c(6973.3, 1682.7), res.time = 14.25)
auc.2021 <- test.auc.allinone(day = c(251, 267), count = c(7228.6, 866.7), res.time = 14.25)
auc.2022 <- test.auc.allinone(day = c(238, 257, 271), count = c(5.7, 2311.1, 1427.8), res.time = 14.25)
auc.2023 <- test.auc.allinone(day = c(240, 252, 264, 275), count = c(10.5, 2631.6, 5003.2, 1045.7), res.time = 14.25)
auc.2024 <- test.auc.allinone(day = c(240, 252, 260), count = c(1125, 3047.1, 3763.2), res.time = 14.25)


# Extract the AUC values from the dataframes for each year
# 2017 removed because only 1 survey with poor counting conditions 
# 2008 removed because only 1 survey, missing peak spawn, significantly underestimates escapement
auc_values_1 <- c(
  "2004" = sum(auc.2004$auc),
  "2005" = sum(auc.2005$auc),
  "2006" = sum(auc.2006$auc),
  "2007" = sum(auc.2007$auc),
 # "2008" = sum(auc.2008$auc),
  "2009" = sum(auc.2009$auc),
  "2011" = sum(auc.2011$auc),
  "2012" = sum(auc.2012$auc),
  "2013" = sum(auc.2013$auc),
  "2014" = sum(auc.2014$auc),
  "2015" = sum(auc.2015$auc),
  "2016" = sum(auc.2016$auc),
#  "2017" = sum(auc.2017$auc),
  "2018" = sum(auc.2018$auc),
  "2019" = sum(auc.2019$auc),
  "2020" = sum(auc.2020$auc),
  "2021" = sum(auc.2021$auc),
  "2022" = sum(auc.2022$auc),
  "2023" = sum(auc.2023$auc),
  "2024" = sum(auc.2024$auc)
)

# Convert to dataframe for easy plotting
auc_df_1 <- data.frame(
  Year = as.numeric(names(auc_values_1)),
  AUC = as.numeric(auc_values_1)
)

# Centralize and standardize the AUC values
auc_df_1 <- auc_df_1 %>%
  mutate(
    AUC_Centralized = AUC - mean(AUC),  # Subtract mean for centralization
    AUC_Standardized = (AUC - mean(AUC)) / sd(AUC)  # Standardize (subtract mean, divide by SD)
  )

# Create the time series plot with the standardized AUC values and smoothed trend line
ggplot(auc_df_1, aes(x = Year, y = AUC_Standardized)) +
  geom_line() +  # Add line for the standardized AUC values
  geom_point(size = 3, color = "blue") +  # Add points to emphasize each year's standardized AUC value
  geom_smooth(method = "loess", color = "red", size = 1.5, se = FALSE) +  # Add smoothed trend line
  scale_x_continuous(breaks = seq(min(auc_df_1$Year), max(auc_df_1$Year), by = 1)) +  # Show every year on the x-axis
  theme_minimal() +  # Use a minimal theme for the plot
  labs(title = "Standardized AUC Escapement Time Series, Nanika River (2004-2024)",  # Title of the plot
       x = "Year",  # X-axis label
       y = "Standardized AUC Escapement")  # Y-axis label
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(dplyr)
library(kableExtra)


# Create a full sequence of years from the dataset range
all_years <- tibble(Inspection.Year = seq(min(nanika.sils$Inspection.Year, na.rm = TRUE), 
                                          max(nanika.sils$Inspection.Year, na.rm = TRUE), 
                                          by = 1))

# Count number of surveys per year where proportion.surveyed = 1
survey_counts.1 <- nanika.sils %>% 
  filter(StreamId %in% 428, proportion.surveyed == 1, !is.na(Sock_AL_Spawning)) %>% 
  filter(Inspection.Year != 2017) %>%  # Exclude 2017
  group_by(Inspection.Year) %>% 
  summarize(n_surveys = n()) %>% 
  ungroup()

# Merge with full year sequence to include years with zero surveys
survey_counts.1.complete <- all_years %>%
  left_join(survey_counts.1, by = "Inspection.Year") %>%
  mutate(n_surveys = replace_na(n_surveys, 0))  # Replace missing values with 0

# Calculate total surveys
total_surveys.1 <- sum(survey_counts.1.complete$n_surveys)

# Print table
kable(survey_counts.1.complete, col.names = c("Year", "Number of Surveys"), caption = "Table 1: Number of utlized surveys per year, Full Survey Extent Method, Nanika River (2004-2024)")
```

#### Results 
This strategy selects only surveys which cover the entire survey extent to generate a time series of Nanika River Sockeye escapement from 2004-2024. 

The total number of useable surveys in this method is **`r total_surveys.1`**


#### Limitations

+ Selecting only surveys which cover the entire survey extent effectively shrinks the sample size of usable survey data 
+ Residence time selection, although constant throughout AUC calculations, remains subjective. Selecting alternative residence times significantly alters escapement.



## 2. LCD Method: Calculate escapement using the most consistent proportion surveyed to correct for inconsistent survey extent/fish distribution 
Required Data Fields (per survey): 

+ Sock_AL_Spawning
+ StreamId
+ SilDate
+ PrimaryInspMode
+ SectionInspected
+ FishDistribution
+ RationaleForEstLive
+ GenComments
+ UnusualConditions

#### Methods
##### <u>Define reaches</u>
Based on surveyor comments from Nanika River aerial surveys, Red Slide Creek was selected as the appropriate boundary between reaches (See Figure 1). 

##### <u>Creating new data fields</u>
Using information present in SIL data, particularly within the various comment and rationale fields recorded by the surveyor, new fields must be created to inform the AUC function. 

+ proportion.surveyed 
  + Depending on fish distribution and survey extent of the river in question, defining separate reaches may be appropriate (as is the case for Nanika). Create proportion.surveyed field informed by SectionInspected field, where surveys which cover the entire extent = 1, and surveys which cover only partial extent = 0.2 (or a value representative of the reach in question)
+ obs.eff
  + Use surveyor comments (generally found in RationaleForEstLive field) to fill observer efficiency as proportions
  + Replace NA values with average obs.eff, or appropriate obs.eff value of choice (e.g. 0.7)
    + Note: create a new column, then replace NA values for easy adjustment of chosen replacement obs.eff value
+ julian.day
  + Use a Julian day calculator to fill the appropriate values for each survey
+ reach2_sk_spawners
  + For surveys which cover the entire survey extent (proportion.surveyed = 1), fill the reach2_sk_spawners column only when reach-specific spawner information can be found within   surveyor comments in the FishDistribution field
  + For surveys which only cover reach 2 (the proportion in question), fill using values from the Sock_AL_Spawning field.
+ reach2_sk_spawners_est_total
  + Fill by dividing (reach2_sk_spawners / obs.eff)

##### <u>Define residence time</u>
Winter data review found that residence time used in AUC escapement calculations (2004-2024) ranged from 10 - 21 days. However, of these estimates, only 2 years used only spawning Sockeye to select residence time.

The average of these residence times (2009 = 13.5 days, 2022 = 15 days) was chosen for this context at 14.25 days.

For the purpose of time series visualization, a constant residence time will be used.

##### Define and run AUC escapement function (test.auc.allinone) using created fields

+ test.auc.allinone function is defined to calculate AUC escapement from relevant raw data fields 
+ Raw data are imported 
+ test.auc.allinone function is run once for each relevant survey year
  + Where day = julian.day, count = reach2_sk_spawners_est_total, residence time = 14.25
+ **Optional:** Survey years with fewer than 2 relevant surveys are removed (e.g. 2017)
+ AUC values are extracted from resulting dataframes, the converted to a new dataframe (auc_values_0.2)
+ auc_values_0.2 is centralized and standardized to visualize time series
+ Resulting escapement time series is plotted 
  +**Optional**: smoothed trend line is added for visualization


```{r fig.cap = " Figure 3: Nanika River Escapement Time Series, LCD Method (2004-2024)", echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}
# Process data for proportion = 0.2
auc.2004 <- test.auc.allinone(day = c(248, 262, 274), count = c(428.6, 81.4, 2011.4), res.time = 14.25)
auc.2005 <- test.auc.allinone(day = c(287), count = c(210), res.time = 14.25)
auc.2006 <- test.auc.allinone(day = c(251, 258, 263, 279), count = c(1083.3, 1366.7, 4333.3, 1636.7), res.time = 14.25)

auc.2008 <- test.auc.allinone(day = c(264, 273, 287), count = c(4071.4, 1857.1, 217.1), res.time = 14.25)
auc.2009 <- test.auc.allinone(day = c(259, 266, 273, 280), count = c(3285.7, 6428.6, 2571.4, 94.3), res.time = 14.25)
auc.2010 <- test.auc.allinone(day = c(252, 257, 270), count = c(1400, 2425, 1333.3), res.time = 14.25)
auc.2012 <- test.auc.allinone(day = c(249, 264, 278), count = c(271.4, 6471.4, 357.1), res.time = 14.25)
auc.2013 <- test.auc.allinone(day = c(256, 263, 270), count = c(6373.3, 3562.7, 1142.7), res.time = 14.25)
auc.2014 <- test.auc.allinone(day = c(265, 270), count = c(7176.5, 4505.9), res.time = 14.25)
auc.2015 <- test.auc.allinone(day = c(262, 273), count = c(11506.8, 6301.4), res.time = 14.25)
auc.2016 <- test.auc.allinone(day = c(263, 273), count = c(8285.7, 2314.3), res.time = 14.25)
#auc.2017 <- test.auc.allinone(day = c(273), count = c(550), res.time = 14.25)
auc.2018 <- test.auc.allinone(day = c(264, 270), count = c(4500, 6612.5), res.time = 14.25)
auc.2019 <- test.auc.allinone(day = c(253, 265, 276, 290), count = c(8052.6, 11873.7, 6600, 200), res.time = 14.25)
auc.2020 <- test.auc.allinone(day = c(262, 274), count = c(4946.7, 1640), res.time = 14.25)

auc.2024 <- test.auc.allinone(day = c(240, 252, 260), count = c(1125, 2823.5, 2894.7), res.time = 14.25)

# Extract the AUC values from the dataframes for each year
auc_values_0.2 <- c(
  "2004" = sum(auc.2004$auc),
  "2005" = sum(auc.2005$auc),
  "2006" = sum(auc.2006$auc),
 # "2007" = sum(auc.2007$auc),
  "2008" = sum(auc.2008$auc),
  "2009" = sum(auc.2009$auc),
 #"2011" = sum(auc.2011$auc),
  "2012" = sum(auc.2012$auc),
  "2013" = sum(auc.2013$auc),
  "2014" = sum(auc.2014$auc),
  "2015" = sum(auc.2015$auc),
  "2016" = sum(auc.2016$auc),
  #"2017" = sum(auc.2017$auc),
  "2018" = sum(auc.2018$auc),
  "2019" = sum(auc.2019$auc),
  "2020" = sum(auc.2020$auc),
  #"2021" = sum(auc.2021$auc),
  #"2022" = sum(auc.2022$auc),
 #"2023" = sum(auc.2023$auc),
  "2024" = sum(auc.2024$auc)
)

# Convert to dataframe for easy plotting
auc_df_0.2 <- data.frame(
  Year = as.numeric(names(auc_values_0.2)),
  AUC = as.numeric(auc_values_0.2)
)

# Centralize and standardize the AUC values
auc_df_0.2 <- auc_df_0.2 %>%
  mutate(
    AUC_Centralized = AUC - mean(AUC),  # Subtract mean for centralization
    AUC_Standardized = (AUC - mean(AUC)) / sd(AUC)  # Standardize (subtract mean, divide by SD)
  )

# Create the time series plot with the standardized AUC values and smoothed trend line
ggplot(auc_df_0.2, aes(x = Year, y = AUC_Standardized)) +
  geom_line() +  # Add line for the standardized AUC values
  geom_point(size = 3, color = "blue") +  # Add points to emphasize each year's standardized AUC value
  geom_smooth(method = "loess", color = "red", size = 1.5, se = FALSE) +  # Add smoothed trend line
  scale_x_continuous(breaks = seq(min(auc_df_0.2$Year), max(auc_df_0.2$Year), by = 1)) +  # Show every year on the x-axis
  theme_minimal() +  # Use a minimal theme for the plot
  labs(title = "Standardized Reach 2 AUC Escapement Time Series, Nanika River (2004-2024)",  # Title of the plot
       x = "Year",  # X-axis label
       y = "Standardized AUC Escapement")  # Y-axis label


```



```{r, echo=FALSE, message=FALSE, warning=FALSE}

# Create a full sequence of years from the dataset range
all_years <- tibble(Inspection.Year = seq(min(nanika.sils$Inspection.Year, na.rm = TRUE), 
                                          max(nanika.sils$Inspection.Year, na.rm = TRUE), 
                                          by = 1))

# Count number of surveys per year
survey_counts.0.2 <- nanika.sils %>% 
  filter(StreamId %in% 428, !is.na(reach2_sk_spawners)) %>% 
  filter(TargetSockeye == TRUE, Inspection.Year != 2017) %>%  # Exclude 2017
  group_by(Inspection.Year) %>% 
  summarize(n_surveys = n()) %>% 
  ungroup()

# Merge with full year sequence to include years with zero surveys
survey_counts.0.2.complete <- all_years %>%
  left_join(survey_counts.0.2, by = "Inspection.Year") %>%
  mutate(n_surveys = replace_na(n_surveys, 0))  # Replace missing values with 0

# Calculate total surveys
total_surveys.0.2 <- sum(survey_counts.0.2.complete$n_surveys)

# Print table
kable(survey_counts.0.2.complete, col.names = c("Year", "Number of Surveys"), caption = "Table 2: Number of utlized surveys per year, LCD Method, Nanika River (2004-2024)")
```

#### Results 
This strategy utilizes surveyor comments to delineate the Nanika River into 2 distinct reaches, where spawning Sockeye are observed and recorded. In theory, when surveys cover only a proportion of a river due to uneven fish distribution, this method will maximize the number of usable surveys.

The total number of usable surveys for this method is **`r total_surveys.0.2`**

These reach-specific count data are used to generate a time series of Nanika River Sockeye escapement in *Reach 2* (Red Slide Creek to Nanika Falls) from 2004-2024.

#### Limitations 

+ Resulting escapement is only representative of Reach 2 of the Nanika River, so displays an escapement *trend* rather than accurate yearly estimates for the system.
+ Splitting the Nanika River into reaches years after data have been collected effectively shrinks the usable survey data.
  + Due to inconsistencies in data collection and information recorded by surveyors, many surveys which cover the entire survey extent do not contain adequate information to split spawning Sockeye observations by reach. This significantly decreases the usable number of surveys within this method.
+ Selection of residence time remains subjective. Selecting alternative residence times significantly alters escapement.


### Comparison 

#### Number of usable surveys

+ The LCD Method should, in theory, maximize the number of usable surveys for AUC time series creation> However, due to insufficient surveyor comments, the LCD method utilizes **`r total_surveys.0.2`** surveys, while the Full Survey Extent Method utilizes **`r total_surveys.1`** surveys. 

#### Discrepancies 

##### 2007 - 2009
Generally, the Total Extent Method more accuratey represents escapement for this period
 + 2007 - the LCD Method selects 0 surveys from 2007, while the Full Survey Extent Method selects 7 surveys, providing a more accurate representation of escapement
 + 2008 - The LCD method selects 3 surveys from 2008, while the Full Survey Extent Method selects only 1 survey. The single survey selected by this method occurs on Julian Day       249, while peak spawn for 2008 occurred on approximately day 265. As such, this survey does not accurately reflect escapement for 2008.  
 + 2009 - Although both methods select 4 surveys from 2009, the Full Survey Extent Method includes a survey from Julian Day 253, while the LCD Method excludes this survey due to     limited delineating information found in surveyor comments. Relative to other years, 2009 displayed an early peak spawn at approximately Julian Day 253. Therefore, the Full       Survey Extent Method more accurately represents AUC escapement for 2009.

##### 2015
Generally, the LCD Method more accurately represents escapement for this year

+ The Full Survey Extent Method selects only 1 survey for 2015, while the LCD Method selects 2. 
+ The Full Survey Extent Method excludes the survey conducted on Julian Day 262, the approximate date of peak spawn in 2015, as this survey did not cover the full survey extent.

```{r fig.cap = " Figure 4: Nanika River Escapement Time Series, Comparison of Methods (2004-2024)", echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}

library(ggplot2)
library(dplyr)

# Combine both datasets into one
combined_nanika <- bind_rows(
  auc_df_0.2 %>%
    mutate(Dataset = "LCD"),
  auc_df_1 %>%
    mutate(Dataset = "Full Survey Extent")
)

# Standardize AUC values (mean = 0, sd = 1)
combined_nanika <- combined_nanika %>%
  mutate(AUC_standardized = scale(AUC))  # Standardizing AUC

# Save the standardized results as a CSV file
write.csv(combined_nanika, "Nanika_AUC_Comparison_Standardized.csv", row.names = FALSE)

# Create a standardized time series plot
nanika_comparison <- ggplot(combined_nanika, aes(x = Year, y = AUC_standardized, color = Dataset)) +
  geom_line(size = 1.2) +  
  geom_point(size = 3) +   
  scale_color_manual(values = c("Full Survey Extent" = "blue", "LCD" = "green")) +  
  scale_x_continuous(breaks = seq(2004, 2024, 2)) +
  labs(
    title = "Standardized Nanika AUC Escapement Comparison",  
    color = "Method",  
    y = "Standardized AUC Escapement",  
    x = "Year"
  ) +
  theme_minimal(base_size = 14) +  
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16),  
    plot.subtitle = element_text(hjust = 0.5, size = 13),  
    legend.position = "top",  
    legend.title = element_text(face = "bold"),
    axis.title = element_text(face = "bold"),
    panel.grid.major = element_line(color = "gray80")
  )

# Display the plot
nanika_comparison
```

### Reccomendation 

For the Nanika River, the Full Survey Extent Method creates a time series of escapement which minimizes concerns and maximizes the number of usable surveys. Compared to the LCD method, this method utilizes a larger survey sample size across a larger survey date range, and as a result generally presents a more representative visualization of escapement over time from the Nanika River.

The LCD Method presents an alternative escapement time series with a similar trend (see comparison plot). However, the lack of Reach-specific spawner observations creates a smaller usable survey sample size, with many years using either 0 or 1 survey to calculate escapement, which is insufficient. Additionally, given that this method excludes observations from a portion of the river, results do not represent accurate escapement estimates, but a time series **trend** which should not be used to inform management decisions. For rivers with more consistent reach-specific spawner observations, this method could maximize the usable number of surveys.

Although both methods provide accurate time series based on their inputs and limitations, they both utilize only a subset of the full SIL data for the date range of interest, and therefore neither method can provide results that are entirely accurate on their own. Justification on method selection should be carefully considered when applying these methods to alternative systems, and clear communication of input data and sample size is critical to avoid misinterpretation of results.
